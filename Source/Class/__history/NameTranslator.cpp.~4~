//---------------------------------------------------------------------------

#pragma hdrstop

#define WEB_RENEMER_DEBUG
#include "NameTranslator.h"
//---------------------------------------------------------------------------
#ifdef WEB_RENEMER_DEBUG
extern TSysLog *Logger;
#endif
//---------------------------------------------------------------------------
#pragma package(smart_init)
//---------------------------------------------------------------------------
void DEBUG(int Level, String Msg){
#ifdef WEB_RENEMER_DEBUG
	Logger->Report("TNameTranslator",Level,Msg);
#endif
}
//---------------------------------------------------------------------------
TNameTranslator::TNameTranslator(TComponent *AOwner){
	IgnoreParenthesys = true;
	IgnoreSquareBrackets = true;
	IgnoreCurlyBrackets = true;
	ReplaceList = new TStringList();
	Owner = AOwner;
	if(Owner != NULL)
		DEBUG(TOTAL_DEBUG,"Created TNameTranslator: owner "+Owner->Name);
	else
		DEBUG(TOTAL_DEBUG, "Created TNameTranslator: null owner");
	AddToReplaceList("."," ");
}
//---------------------------------------------------------------------------
TNameTranslator::~TNameTranslator(){

}
//---------------------------------------------------------------------------
void TNameTranslator::SetParenthesys(bool YN){
	FIgnoreParenthesys = YN;
}
//---------------------------------------------------------------------------
bool TNameTranslator::GetParenthesys(){
	return FIgnoreParenthesys;
}
//---------------------------------------------------------------------------
void TNameTranslator::SetSquareBrackets(bool YN){
	FIgnoreSquareBrackets = YN;
}
//---------------------------------------------------------------------------
bool TNameTranslator::GetSquareBrackets(){
	return FIgnoreSquareBrackets;
}
//---------------------------------------------------------------------------
void TNameTranslator::SetCurlyBrackets(bool YN){
	FIgnoreCurlyBrackets = YN;
}
//---------------------------------------------------------------------------
bool TNameTranslator::GetCurlyBrackets(){
	return FIgnoreCurlyBrackets;
}
//---------------------------------------------------------------------------
void TNameTranslator::AddToReplaceList(String From, String To, bool IgnoreCase, bool Active){
	unsigned char *Info;
	Info = (unsigned char*)AllocMem(1);
	*Info = IgnoreCase + (Active?2:0);
	ReplaceList->AddPair(From, To,(TObject*)Info);
}
//---------------------------------------------------------------------------
Episode_Info TNameTranslator::TranslateEpisode(String OriginalName){
	Episode_Info Out;
	String Tmp, A, B;
	unsigned char *IgnoreCase;
	int a, b, c;

	Out.OriginalName = OriginalName;
	Out.NameCandidate = new TStringList();
	Out.Order.Season = UNK_SEASON;
	Out.Order.Episode = UNK_EPISODE;
	Out.Order.Order_Start = -1;
	Out.Order.Order_End = -1;
	Tmp = OriginalName;
	//First of all: store file extension and delete path + extension from name...
	Out.FileExtension = System::Ioutils::TPath::GetExtension(Tmp);
	Tmp = System::Ioutils::TPath::GetFileNameWithoutExtension(Tmp);
	//Now remove contenent beetween bracket and parenthesys (if request)
	if(IgnoreParenthesys){
		b = 1;
		A = Tmp;
		while(b != 0){
			b = A.Pos("(");
			if(b != 0){
				c = A.Pos(")");
				if(c > b)
					A = A.Delete(b, c - b);
				A = A.SubString(a + 1, A.Length());
			}
		}
	}
	//Now: replace strings in ReplaceList with '.'...
	for(a = 0; a < ReplaceList->Count; a++){
		A = ReplaceList->Names[a];
		if(A.Pos(".") != 0){
			B = ReplaceList->Values[A];
			IgnoreCase = (unsigned char*)ReplaceList->Objects[a];
			if(*IgnoreCase)
				Tmp = ReplaceText(Tmp, A, B);
			else
				Tmp = ReplaceStr(Tmp, A, B);
		}
	}
	//Now replace '.' with space...
	Tmp = ReplaceText(Tmp,"."," ");
	//Replace all string in ReplaceList except strings containing "."
	for(a = 0; a < ReplaceList->Count; a++){
		A = ReplaceList->Names[a];
		if(A.Pos(".") == 0){
			B = ReplaceList->Values[A];
			IgnoreCase = (unsigned char*)ReplaceList->Objects[a];
			if(*IgnoreCase)
				Tmp = ReplaceText(Tmp, A, B);
			else
				Tmp = ReplaceStr(Tmp, A, B);
		}
	}	
	//Search for episode order...
	Out.Order = ScanForEpisodeOrder(Tmp);
	//Ok: let's see for name tv serie name and possible episode title...
	if(Out.Order.Season > UNK_SEASON){
		//Possible serie name...
		A = Tmp.SubString(0, Out.Order.Order_Start);
		Out.NameCandidate->Add(A);
		//... and suggested title
		B = Tmp.SubString(Out.Order.Order_End, Tmp.Length());
		Out.SuggestedTitle = B;
	}
	return Out;
}
//---------------------------------------------------------------------------
Episode_Order TNameTranslator::ScanForEpisodeOrder(String FileName){
	Episode_Order Out;
	Out.Season = UNK_SEASON;
	Out.Episode = UNK_EPISODE;
	Out.Order_End = -1;
	Out.Order_Start = -1;
	String Tmp;
	String A, B, C;
	int a, b, c, d, e;
	//First: work with lowercase name
	Tmp = FileName.LowerCase();
	//Then start to search letter 's' for something like 'sxxeyy' where xx and yy
	//are numbers...
	A = Tmp;
	while(A.Pos("s") != 0){
		Out.Season = UNK_SEASON;
		Out.Episode = UNK_EPISODE;		
		Out.Order_End = -1;
		Out.Order_Start = -1;
		a = A.Pos("s");
		//Ok: we found "s". Now check if there's some numbers...
		B = A.SubString(a + 1,A.Length());				//Substring of FileName: start after "s". Necessary for next loop...
		b = 0;											//Loop checker and number read from string
		c = a + 1;										//Position to read number...
		d = 0;											//Final season value
		//Create a loop for obtain season number...
		while(b != -1){
			C = A.SubString(c, 1);
			b = StrToIntDef(C, -1);
			if(b != -1){
				d = (d * 10) + b;		//Place season number here...
			}
			c++;
		}
		//Ok season is saved in variable d: now check if it's valid...
		//b = A.Pos("e");
		b = System::Pos("e",A,a);
		if(b == c - 1){	//Ok: after "sxx" we have letter "e". It's may be correct..
			Out.Season = d;
			Out.Order_Start = a - 2;
			//Now find episode...
			//B = A.SubString(b + 1, A.Length);
			c = b + 1;
			b = 0;
			d = 0;
			while(b != -1){
				C = A.SubString(c, 1);
				b = StrToIntDef(C, -1);
				if(b != -1){
					d = (d * 10) + b;
				}
				c++;
			}
			//Ok: now episode number is available
			Out.Episode = d;
			Out.Order_End = c - 1;
			return Out;
		}
		A = B;
	}
	//No lucky with sXXeYY format: now search XXxYY format...
	A = Tmp;
	while(A.Pos("x") != 0){
		Out.Season = UNK_SEASON;
		Out.Episode = UNK_EPISODE;	
		Out.Order_End = -1;
		Out.Order_Start = -1;		
		a = A.Pos("x");
		B = A.SubString(a + 1, A.Length());					//Substring of FileName: start after "x". Necessary for next loop...
		b = 0;												//Loop checker and number read from string
		c = a - 1;											//Position to read number...
		d = 0;												//Final season value
		e = 1;												//Multiplier for read season value
		//Loop that search season number...
		while(b != -1){
			C = A.SubString(c, 1);
			b = StrToIntDef(C, -1);
			if(b != -1){
				d = d + b * e;								//Place season number here...
				e = e * 10;									//Increase season number multiplier
			}
			c--;			
		}
		//Ok season is saved in variable d: now check if it's valid...
		C = A.SubString(a + 1, 1);
		b = StrToIntDef(C, -1);
		if(b != -1){										//Ok, it's a valid XXxYY format
			Out.Season = d;
			Out.Order_Start = c;
			c = a + 2;
			d = 0;
			while(b != -1){
				d = (d * 10) + b;
				C = A.SubString(c, 1);
				b = StrToIntDef(C, -1);
				c ++;
			}
			//Ok: now episode number is available
			Out.Episode = d;
			Out.Order_End = c - 1;
			return Out;
		}
		A = B;
	}
	return Out;
}
//---------------------------------------------------------------------------
void TNameTranslator::SetitemCase(String Item, bool IgnoreCase){
	int Index = ReplaceList->IndexOfName(Item);
	if(Index > -1){
		int *Obj = (int*)ReplaceList->Objects[Index];
		*Obj = (*Obj & 2)+(IgnoreCase?1:0);
	}
}
//---------------------------------------------------------------------------
bool TNameTranslator::GetItemCase(String Item){
	int Index = ReplaceList->IndexOfName(Item);
	if(Index > -1){
		int *Obj = (int*)ReplaceList->Objects[Index];
		return (*Obj&1?true:false);
	}
	return true;
}
//---------------------------------------------------------------------------
void TNameTranslator::SetitemActive(String Item, bool Active){
	int Index = ReplaceList->IndexOfName(Item);
	if(Index > -1){
		int *Obj = (int*)ReplaceList->Objects[Index];
		*Obj = (*Obj & 1)+(Active?2:0);
	}
}
//---------------------------------------------------------------------------
bool TNameTranslator::GetItemActive(String Item){
	int Index = ReplaceList->IndexOfName(Item);
	if(Index > -1){
		int *Obj = (int*)ReplaceList->Objects[Index];
		return (*Obj&2?true:false);
	}
	return true;
}
//---------------------------------------------------------------------------
String TNameTranslator::GetItem(int Index){
	if(Index > -1){
		if(Index < ReplaceList->Count){
			return ReplaceList->KeyNames[Index];
		}
	}
	return "";
}
//---------------------------------------------------------------------------
int TNameTranslator::GetNumReplaceItems(){

	return ReplaceList->Count;
}
//---------------------------------------------------------------------------
String TNameTranslator::ExportIgnoreList(){
	String Out = "";
	int *Obj;
	for(int a=0;a<ReplaceList->Count;a++){
		Obj = (int*)ReplaceList->Objects[a];
		if(ReplaceList->Values[a]==""){
			Out = Out + ReplaceList->KeyNames[a]+IntToStr(*Obj)+(String)",";
		}
	}
	if(Out.Length() > 0){
		if(RightStr(Out,1) == ",")
			Out = LeftStr(Out,Out.Length()-1);
	}
	return Out;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------


