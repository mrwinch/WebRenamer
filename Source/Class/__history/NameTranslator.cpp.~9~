//---------------------------------------------------------------------------

#pragma hdrstop

#define WEB_RENEMER_DEBUG
#include "NameTranslator.h"
//---------------------------------------------------------------------------
#ifdef WEB_RENEMER_DEBUG
extern TSysLog *Logger;
#endif
//---------------------------------------------------------------------------
#pragma package(smart_init)
//---------------------------------------------------------------------------
void DEBUG(int Level, String Msg){
#ifdef WEB_RENEMER_DEBUG
	Logger->Report("TNameTranslator",Level,Msg);
#endif
}
//---------------------------------------------------------------------------
TNameTranslator::TNameTranslator(TComponent *AOwner){
	IgnoreParenthesys = true;
	IgnoreSquareBrackets = true;
	IgnoreCurlyBrackets = true;
	ReplaceList = new TStringList();
	Owner = AOwner;
	if(Owner != NULL)
		DEBUG(TOTAL_DEBUG,"Created TNameTranslator: owner "+Owner->Name);
	else
		DEBUG(TOTAL_DEBUG, "Created TNameTranslator: null owner");
	AddToReplaceList("."," ");
}
//---------------------------------------------------------------------------
TNameTranslator::~TNameTranslator(){

}
//---------------------------------------------------------------------------
void TNameTranslator::SetParenthesys(bool YN){
	FIgnoreParenthesys = YN;
}
//---------------------------------------------------------------------------
bool TNameTranslator::GetParenthesys(){
	return FIgnoreParenthesys;
}
//---------------------------------------------------------------------------
void TNameTranslator::SetSquareBrackets(bool YN){
	FIgnoreSquareBrackets = YN;
}
//---------------------------------------------------------------------------
bool TNameTranslator::GetSquareBrackets(){
	return FIgnoreSquareBrackets;
}
//---------------------------------------------------------------------------
void TNameTranslator::SetCurlyBrackets(bool YN){
	FIgnoreCurlyBrackets = YN;
}
//---------------------------------------------------------------------------
bool TNameTranslator::GetCurlyBrackets(){
	return FIgnoreCurlyBrackets;
}
//---------------------------------------------------------------------------
void TNameTranslator::AddToReplaceList(String From, String To, bool IgnoreCase, bool Active){
	unsigned char *Info;
	Info = (unsigned char*)AllocMem(1);
	*Info = IgnoreCase + (Active?2:0);
	ReplaceList->AddPair(From, To,(TObject*)Info);
}
//---------------------------------------------------------------------------
Episode_Info TNameTranslator::TranslateEpisode(String OriginalName){
	Episode_Info Out;
	Episode_Order *Data;
	String Tmp, A, B;
	TStringList *Res;
	int a;
	unsigned char *IgnoreCase;

	Out.OriginalName = OriginalName;
	Out.NameCandidate = new TStringList();
	Out.Order.Season = UNK_SEASON;
	Out.Order.Episode = UNK_EPISODE;
	Out.Order.Order_Start = -1;
	Out.Order.Order_End = -1;
	Tmp = OriginalName;
	//First of all: store file extension and delete path + extension from name...
	Out.FileExtension = System::Ioutils::TPath::GetExtension(Tmp);
	Tmp = System::Ioutils::TPath::GetFileNameWithoutExtension(Tmp);
	//Now remove contenent beetween bracket and parenthesys/brackets (if request)
	if(IgnoreParenthesys){
		A = Tmp;
		Res = EnumTextInside(A,"\\(","\\)");
		for(a=0;a<Res->Count;a++){
			Tmp = ReplaceText(A, Res->Strings[a],"");
		}
	}
	if(IgnoreSquareBrackets){
		A = Tmp;
		Res = EnumTextInside(A,"\\[","\\]");
		for(a=0;a<Res->Count;a++){
			Tmp = ReplaceText(A, Res->Strings[a],"");
		}
	}
	if(IgnoreCurlyBrackets){
		A = Tmp;
		Res = EnumTextInside(A,"{","}");
		for(a=0;a<Res->Count;a++){
			Tmp = ReplaceText(A, Res->Strings[a],"");
		}
	}
	A = Tmp;
	//Now: replace strings in ReplaceList with '.'...
	for(a = 0; a < ReplaceList->Count; a++){
		A = ReplaceList->Names[a];
		if(A.Pos(".") != 1){
			B = ReplaceList->Values[A];
			IgnoreCase = (unsigned char*)ReplaceList->Objects[a];
			if(*IgnoreCase)
				Tmp = ReplaceText(Tmp, A, B);
			else
				Tmp = ReplaceStr(Tmp, A, B);
		}
	}
	//Now replace '.' with space...

	Tmp = ReplaceText(Tmp,"."," ");
	//Replace all string in ReplaceList except strings containing "."
	for(a = 0; a < ReplaceList->Count; a++){
		A = ReplaceList->Names[a];
		if(A.Pos(".") == 0){
			B = ReplaceList->Values[A];
			IgnoreCase = (unsigned char*)ReplaceList->Objects[a];
			if(*IgnoreCase)
				Tmp = ReplaceText(Tmp, A, B);
			else
				Tmp = ReplaceStr(Tmp, A, B);
		}
	}
	//Search for episode order...
	Data = ScanForEpisodeOrder(Tmp);
	Out.Order = *Data;
	//Ok: let's see for name tv serie name and possible episode title...
	if(Out.Order.Season > UNK_SEASON){
		//Possible serie name...
		A = Tmp.SubString(1, Out.Order.Order_Start);
/*		if(A.LastDelimiter(" ") == A.Length())
			A = A.SubString(1,A.Length()-1);      */
		Out.NameCandidate->Add(A);
		//... and suggested title
		B = Tmp.SubString(Out.Order.Order_End, Tmp.Length());
		Out.SuggestedTitle = B;
	}
	return Out;
}
//---------------------------------------------------------------------------
Episode_Order *TNameTranslator::ScanForEpisodeOrder(String FileName){
	Episode_Order *Out = (Episode_Order*)AllocMem(sizeof(Episode_Order));
	TStringList *Res, *Res2;
	String Tmp,A,B,C;
	int a,b,c,d,e;
	Out->Season = UNK_SEASON;
	Out->Episode = UNK_EPISODE;
	Out->Order_End = -1;
	Out->Order_Start = -1;
	//First: work with lowercase name
	Tmp = FileName.LowerCase();
	//Then start to search letter 's' for something like 'sxxeyy' where xx and yy
	//are numbers...
//******************************
	Res = new TStringList();
	Res->StrictDelimiter = true;
	Res->Delimiter = ' ';
	Res->DelimitedText = Tmp;
	for(a=0;a<Res->Count;a++){
		A = Res->Strings[a];
		c = A.Pos("s");
		if(c == 1){    //sxxeyy format?
			b = A.Pos("e");
			if(b > 0){        //Ok!
			   B = A.SubString(2, b-2);
			   d = PickNumber(B);
			   Out->Season = d;
			   Out->Order_Start = Tmp.Pos(A) - 1;
			   B = A.SubString(b+1, A.Length());
			   d = PickNumber(B);
			   Out->Episode = d;
			   Out->Order_End = Tmp.Pos(A)+A.Length();
			   return Out;
			}
		}
		c = A.Pos("x");
		if(c > 0){
			B = A.SubString(1,c - 1);
			d = PickNumber(B);
			Out->Season = d;
			Out->Order_Start = Tmp.Pos(A) - 2;
			B = A.SubString(c+1,A.Length());
			d = PickNumber(B);
			Out->Episode = d;
			Out->Order_End = Tmp.Pos(A)+A.Length();
			return Out;
		}
	}
	return Out;
	/*        UnicodeString
	A = Tmp;
	Res = EnumTextInside(A," s","e",false);
	for(a=0;a<Res->Count;a++){
		b = System::Sysutils::StrToIntDef(Res->Strings[a],-1);
		if(b != -1){
			Out->Season = b;
			c = A.Pos(" s"+Res->Strings[a]+(String)"e");
			Res2 = EnumTextInside(A,"e"," ",false);
			for(b=0;b<Res2->Count;b++){
				d = System::Sysutils::StrToIntDef(Res2->Strings[b],-1);
				if(d != -1){
					e = A.Pos("e"+Res2->Strings[b]+(String)" ");
					if(e == c + 4){
						Out->Episode = d;
						Out->Order_Start = c;
						Out->Order_End = e + 4;
						return Out;
					}
				}
			}
		}
	}
	//No lucky with sXXeYY format: now search XXxYY format...
	A = Tmp;
	while(A.Pos("x") != 0){
		Out->Season = UNK_SEASON;
		Out->Episode = UNK_EPISODE;
		Out->Order_End = -1;
		Out->Order_Start = -1;
		a = A.Pos("x");
		B = A.SubString(a + 1, A.Length());					//Substring of FileName: start after "x". Necessary for next loop...
		b = 0;												//Loop checker and number read from string
		c = a - 1;											//Position to read number...
		d = 0;												//Final season value
		e = 1;												//Multiplier for read season value
		//Loop that search season number...
		while(b != -1){
			C = A.SubString(c, 1);
			b = StrToIntDef(C, -1);
			if(b != -1){
				d = d + b * e;								//Place season number here...
				e = e * 10;									//Increase season number multiplier
			}
			c--;
		}
		//Ok season is saved in variable d: now check if it's valid...
		C = A.SubString(a + 1, 1);
		b = StrToIntDef(C, -1);
		if(b != -1){										//Ok, it's a valid XXxYY format
			Out->Season = d;
			Out->Order_Start = c;
			c = a + 2;
			d = 0;
			while(b != -1){
				d = (d * 10) + b;
				C = A.SubString(c, 1);
				b = StrToIntDef(C, -1);
				c ++;
			}
			//Ok: now episode number is available
			Out->Episode = d;
			Out->Order_End = c;
			return Out;
		}
		A = B;
	}
	return Out;
	*/
}
//---------------------------------------------------------------------------
void TNameTranslator::SetitemCase(String Item, bool IgnoreCase){
	int Index = ReplaceList->IndexOfName(Item);
	if(Index > -1){
		int *Obj = (int*)ReplaceList->Objects[Index];
		*Obj = (*Obj & 2)+(IgnoreCase?1:0);
	}
}
//---------------------------------------------------------------------------
bool TNameTranslator::GetItemCase(String Item){
	int Index = ReplaceList->IndexOfName(Item);
	if(Index > -1){
		int *Obj = (int*)ReplaceList->Objects[Index];
		return (*Obj&1?true:false);
	}
	return true;
}
//---------------------------------------------------------------------------
void TNameTranslator::SetitemActive(String Item, bool Active){
	int Index = ReplaceList->IndexOfName(Item);
	if(Index > -1){
		int *Obj = (int*)ReplaceList->Objects[Index];
		*Obj = (*Obj & 1)+(Active?2:0);
	}
}
//---------------------------------------------------------------------------
bool TNameTranslator::GetItemActive(String Item){
	int Index = ReplaceList->IndexOfName(Item);
	if(Index > -1){
		int *Obj = (int*)ReplaceList->Objects[Index];
		return (*Obj&2?true:false);
	}
	return true;
}
//---------------------------------------------------------------------------
String TNameTranslator::GetItem(int Index){
	if(Index > -1){
		if(Index < ReplaceList->Count){
			return ReplaceList->KeyNames[Index];
		}
	}
	return "";
}
//---------------------------------------------------------------------------
int TNameTranslator::GetNumReplaceItems(){

	return ReplaceList->Count;
}
//---------------------------------------------------------------------------
String TNameTranslator::ExportIgnoreList(){
	String Out = "";
	int *Obj;
	for(int a=1;a<ReplaceList->Count;a++){
		Obj = (int*)ReplaceList->Objects[a];
		if(ReplaceList->Values[a]==""){
/*			if(Out.Length()>0)
				Out = Out+",";*/
			Out = Out + ReplaceList->KeyNames[a]+IntToStr(*Obj)+(String)",";
		}
	}
	if(Out.Length() > 0){
		if(RightStr(Out,1) == ",")
			Out = LeftStr(Out,Out.Length()-1);
	}
	return Out;
}
//---------------------------------------------------------------------------
void TNameTranslator::AddToIgnoreList(String Txt, bool IgnoreCase, bool Active){
	AddToReplaceList(Txt,"",IgnoreCase,Active);
}
//---------------------------------------------------------------------------
void TNameTranslator::ImportIgnoreList(String List){
	TStringDynArray Array;
	int b;
	String Item;
	ReplaceList->Clear();
	AddToIgnoreList(".",true,true);
	Array = SplitString(List,",");
	for(int a=0;a<Array.Length;a++){
		Item = Array[a];
		b = StrToIntDef(RightStr(Item,1),-1);
		Item = LeftStr(Item,Item.Length()-1);
		if(b != -1)
			AddToIgnoreList(Item,(b&1)?true:false,(b&2)?true:false);
	}
}
//---------------------------------------------------------------------------
TStringList *TNameTranslator::EnumTextInside(String Source, String Start, String End, bool IncludeLimits){
	TStringList *Out = new TStringList();
	String Pattern;
	String Tmp;
	TMatchCollection Items;
	TRegEx *RegEx;
	Pattern = Format("%s(.*?)%s",ARRAYOFCONST((Start,End)));
	RegEx = new TRegEx(Pattern,TRegExOptions());
	Items = RegEx->Matches(Source);
	for(int a=0;a<Items.Count;a++){
		Tmp = Items[a].Value;
		if(IncludeLimits == false){
			Tmp = System::Strutils::AnsiReplaceStr(Tmp,Start,"");
			Tmp = System::Strutils::AnsiReplaceStr(Tmp,End,"");
		}
		Out->Add(Tmp);
	}
	return Out;
}
//---------------------------------------------------------------------------
int TNameTranslator::PickNumber(String Value, int DefValue){
	int Out = 0;
	int a;
	a = 1;
	if(Value[a]<='0' && Value[a]>='9')
		return DefValue;
	do{
		Out *=10;
		Out = Out + (Value[a] - '0');
		a++;
		if(a > Value.Length())
			break;
	}while(Value[a]>='0' && Value[a]<='9');
	return Out;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------



