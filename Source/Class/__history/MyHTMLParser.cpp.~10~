//---------------------------------------------------------------------------
#pragma hdrstop
#include "MyHTMLParser.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
//---------------------------------------------------------------------------
#ifdef WEB_RENAMER_DEBUG
extern TSysLog *Logger;
#endif
//---------------------------------------------------------------------------
void DEBUG_PRS(int Level, String Msg){
#ifdef WEB_RENAMER_DEBUG
	if(Logger)
		Logger->Report("HTMLPR",NAME_LEVEL(Level),Msg);
#endif
}
//---------------------------------------------------------------------------
TStringList *MySplitString(String Source,String StartData, String EndData, bool WithLimits){
	TStringList *Out = new TStringList();
	String Pattern;
	String Tmp;
	TMatchCollection Items;
	TRegEx *RegEx;
	Pattern = Format("%s(.*?)%s",ARRAYOFCONST((StartData,EndData)));
	RegEx = new TRegEx(Pattern,TRegExOptions());
	Items = RegEx->Matches(Source);
	for(int a=0;a<Items.Count;a++){
		Tmp = Items[a].Value;
		if(WithLimits == false){
			Tmp = System::Strutils::AnsiReplaceStr(Tmp,StartData,"");
			Tmp = System::Strutils::AnsiReplaceStr(Tmp,EndData,"");
		}
		Out->Add(Tmp);
	}
	return Out;	
}
//---------------------------------------------------------------------------
HTMLNode::HTMLNode(){
	Setup();
}
//---------------------------------------------------------------------------
HTMLNode::HTMLNode(String Start){
	Setup();
	LoadFromString(Start);
}
//---------------------------------------------------------------------------
HTMLNode::~HTMLNode(){
	
}
//---------------------------------------------------------------------------
String HTMLNode::GetTag(){
	return FTag;
}
//---------------------------------------------------------------------------
void HTMLNode::Setup(){
	FTag = "";
	Child = new TList();
	Attribute = new TStringList();
}
//---------------------------------------------------------------------------
void HTMLNode::LoadFromString(String Src){
	//TStringList *List = MySplitString(Src," "," ",false);
	int a;
	String Tmp;
	String Key,Value;
	int Start,Stop;
	bool First;
	Attribute->Clear();
	if(Src.Pos(">") > 0)
		Src = Src.SubString(1,Src.Length()-1);
	a = Src.Pos(" ");
	if(a > 0){
		FTag = Src.SubString(1, a);
		FTag = FTag.Trim();
		Tmp = Src.SubString(a + 1, Src.Length() - a);
	}
	else{
		FTag = Src;
		Tmp = Src.SubString(a, Src.Length());
	}
	if(Tmp.Length()){
		if(Tmp.Pos(" ") == 0)
			Tmp = Tmp + (String)" ";
		Start = 1;
		for(a=1;a<Tmp.Length();a++){
			switch(Tmp[a]){
				case '=':{
					Stop = a - 1;
					Key = Tmp.SubString(Start,Stop-Start + 1);
					Key = Key.Trim();
					Start = a + 1;
					First = false;
				}break;
				case '"':{
					if(First){
						Stop = a-1;
						Value = Tmp.SubString(Start,Stop-Start+1);
						First = false;
						Attribute->AddPair(Key,Value);
					}
					else{
						First = true;
						Start = a + 1;
					}
				}break;
			};
		}
/*		Attribute->StrictDelimiter = true;
		Attribute->Delimiter = ' ';
		Attribute->QuoteChar = '"';
		Attribute->DelimitedText = Tmp;*/
	}
}
//---------------------------------------------------------------------------
String HTMLNode::GetClass(){
	String Out = Attribute->Values["class"];
	Out = System::Strutils::AnsiReplaceStr(Out,"\"","");
	return Out;
}
//---------------------------------------------------------------------------
String HTMLNode::GetID(){
	String Out = Attribute->Values["id"];
	Out = System::Strutils::AnsiReplaceStr(Out,"\"","");
	return Out;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
MyHTMLParser::MyHTMLParser(){
	NodeList = new TList();
	SingleTag = new TStringList();
	
	SingleTag->Add("meta");
	SingleTag->Add("link");
	SingleTag->Add("area");
	SingleTag->Add("base");
	SingleTag->Add("basefont");
	SingleTag->Add("br");
	SingleTag->Add("embed");
	SingleTag->Add("frame");
	SingleTag->Add("hr");	
	SingleTag->Add("img");	
	SingleTag->Add("input");	
	SingleTag->Add("param");
	SingleTag->Add("source");
	SingleTag->Add("track");
	SingleTag->Add("wbr");
}
//---------------------------------------------------------------------------
MyHTMLParser::~MyHTMLParser(){
	
}
//---------------------------------------------------------------------------
TStringList *MyHTMLParser::SplitString(String Source, bool WithLimits){
	String Txt;
	int a;
	int Start,Stop;
	bool HasSpace;
	TStringList *Out = new TStringList();
	Txt = "";
	for(a=1;a<Source.Length();a++){
		switch(Source[a]){
			case '<':{
				Start = a;
				HasSpace = false;
			}break;
			case '>':{
				Stop = a;
				if(HasSpace)
					Txt = Source.SubString(Start,Stop-Start + 1);
				else
					Txt = Source.SubString(Start,Stop-Start);
				if(WithLimits == false){
					Txt = Txt.SubString(2,Txt.Length()-1);
				}
				Out->Add(Txt);
			}break;
			case ' ':{
				HasSpace = true;
			}break;
		}
	}
	return Out;
	//return MySplitString(Source,"<",">",WithLimits);
}
//---------------------------------------------------------------------------
int MyHTMLParser::LoadFromString(String Src){
	DEBUG_PRS(INFO_DEBUG,"LoadFromString()");
	int a;
	int b;
	bool HasComplete;
	HTMLNode *Node;
	String TxtNode;
	String Tag;
	String Str;
	TList *Internal = new TList();
	TStringList *Temp = SplitString(Src, false);		//Split tag without '<' and '>'
	NodeList->Clear();
	for(a = 0; a< Temp->Count;a++){
		TxtNode = Temp->Strings[a].Trim();
        Str = Temp->Strings[a];
		if(TxtNode.Pos("/") != 1){
			Node = new HTMLNode(Temp->Strings[a]);
			NodeList->Add(Node);
			if(TxtNode == "iframe")
				b = 0;
			if(SingleTag->IndexOf(Node->Tag.LowerCase()) == -1){	//No </...>
				if(TxtNode.Pos("!") != 1)
					Internal->Add(Node);
			}
				DEBUG_PRS(TOTAL_DEBUG,Str.StringOfChar(' ',Internal->Count)+Node->Tag+(String)":"+Node->Class+(String)" - "+Node->ID);
		}
		else{
			b = TxtNode.Pos(" ");
			if(b)
				Tag = TxtNode.SubString(2, b);
			else
				Tag = TxtNode.SubString(2, TxtNode.Length());
			Node = (HTMLNode*)Internal->Last();
			if(Node){
				if(Node->Tag == Tag){
					DEBUG_PRS(TOTAL_DEBUG,Str.StringOfChar(' ',Internal->Count)+(String)"/"+Node->Tag);
					Internal->Delete(Internal->Count - 1);
				}
				else{		//ERROR!!!!

				}
			}
		}
	}
	return 0;
}
//---------------------------------------------------------------------------
int MyHTMLParser::LoadFromFile(String FileName){
//	TStringStream *Stream = new TStringStream("");
//	Stream->LoadFromFile(FileName);
//	return LoadFromString(Stream->DataString);
	return 0;
}
//---------------------------------------------------------------------------
String MyHTMLParser::MultipleBack(int Num){
	UnicodeString Str;
	return Str.StringOfChar(' ',Num);
}
//---------------------------------------------------------------------------
#pragma package(smart_init)