//---------------------------------------------------------------------------

#pragma hdrstop
#pragma package(smart_init)
#define WEB_RENEMER_DEBUG
#include "ConnectionManager.h"
#ifdef WEB_RENAMER_DEBUG
extern TSysLog *Logger;
#endif
//---------------------------------------------------------------------------
/****************************************************
 *  DEBUG
 *  
 *  Description: small function to debug class TConnectionManager
 *  
 *  Level: minimum level of debugging at which information will be show
 *  Msg: message of debug to show
 *  Return value: none
 *  
 *  Note:
 ***************************************************/
void DEBUG(int Level, String Msg){
#ifdef WEB_RENAMER_DEBUG
	if(Logger)
		Logger->Report("ConnectionManager",Level,Msg);
#endif
}
//---------------------------------------------------------------------------
/****************************************************
 *  DEBUG_MGR
 *
 *  Description: function to debug class TCommandList
 *
 *  Level:minimum level of debugging at which information will be show
 *  Msg: message of debug to show
 *  Return value: none
 *
 *  Note:
 ***************************************************/
void DEBUG_MGR(int Level, String Msg){
#ifdef WEB_RENAMER_DEBUG
	if(Logger)
		Logger->Report("CommandList",Level,Msg);
#endif
}
//---------------------------------------------------------------------------
/****************************************************
 *  DEBUG_SRC
 *
 *  Description: function to debug class TWebSource
 *
 *  Level:minimum level of debugging at which information will be show
 *  Msg: message of debug to show
 *  Return value: none
 *
 *  Note:
 ***************************************************/
void DEBUG_SRC(int Level, String Msg){
#ifdef WEB_RENAMER_DEBUG
	if(Logger)
		Logger->Report("WebSource",Level,Msg);
#endif
}
//---------------------------------------------------------------------------
/****************************************************
 *  DEBUG_GRB
 *
 *  Description: function to debug class TInfoGrabber
 *
 *  Level:minimum level of debugging at which information will be show
 *  Msg: message of debug to show
 *  Return value: none
 *
 *  Note:
 ***************************************************/
void DEBUG_GRB(int Level, String Msg){
#ifdef WEB_RENAMER_DEBUG
	if(Logger)
		Logger->Report("InfoGrabber",Level,Msg);
#endif	
}
//---------------------------------------------------------------------------
/****************************************************
 *  CopyNet_Operation
 *  
 *  Description: copy information from one Net_Operation struct to another
 *  
 *  Src: source of information
 *  Dest: destination of information
 *  Return value: 0 if success, -1 if Src is NULL, -2 if Dest is null
 *  
 *  Note:
 ***************************************************/
int CopyNet_Operation(Net_Operation *Src, Net_Operation* Dest){
	if(Src ){
		if(Dest){
			Dest->Url = Src->Url;
			Dest->Data = Src->Data;
			Dest->MethodType = Src->MethodType;
			Dest->ExpectedAnswer = Src->ExpectedAnswer;
			Dest->AnswerManager = Src->AnswerManager;
			return 0;
		}
		return -2;
	}
	return -1;
}
//---------------------------------------------------------------------------
void TestTheMovieDB2(TInfoGrabber *Grabber){
/*	TWebSource *Src = Grabber->CreateInfoSource("The movie DB Test","");
	CommandList *Cmd= Src->CreateCommandList("Movie DB query test","");
	Src->AddParameter("api_key","cc8c9c1f521f6b6f06cebdedf012b102");
	Cmd->CreateOperation("https://api.themoviedb.org/3/search/tv?api_key=<<api_key>>&language=en-US&query=The%20walking%20dead&page=1","",METHOD_GET);
	Src->ExecuteCommand(Cmd);      */
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/****************************************************
 *  Base_Info::Base_Info
 *  
 *  Description: class constructor
 *  
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
Base_Info::Base_Info(){
	
}
//---------------------------------------------------------------------------
/****************************************************
 *  Base_Info::~Base_Info
 *  
 *  Description: class destructor
 *  
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
Base_Info::~Base_Info(){
	
}
//---------------------------------------------------------------------------
/****************************************************
 *  Base_Info::SetName
 *  
 *  Description: function set for name property
 *  
 *  Name: name to set
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
void Base_Info::SetName(String Name){
	FName = Name;
}
//---------------------------------------------------------------------------
/****************************************************
 *  Base_Info::GetName
 *  
 *  Description: function that return Name property
 *  
 *  Return value: property Name
 *  
 *  Note:
 ***************************************************/
String Base_Info::GetName(){
	return FName;
}
//---------------------------------------------------------------------------
/****************************************************
 *  Base_Info::SetID
 *  
 *  Description: function that set ID property
 *  
 *  ID: new ID value
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
void Base_Info::SetID(int ID){
	FID = ID;
}
//---------------------------------------------------------------------------
/****************************************************
 *  Base_Info::GetID
 *  
 *  Description: function that return ID property
 *  
 *  Return value: the value of property ID
 *  
 *  Note:
 ***************************************************/
int Base_Info::GetID(){
	return FID;
}
//---------------------------------------------------------------------------
/****************************************************
 *  Base_Info::SetDesc
 *  
 *  Description: function that set property Description
 *  
 *  Desc: new description
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
void Base_Info::SetDesc(String Desc){
	FDescription = Desc;
}
//---------------------------------------------------------------------------
/****************************************************
 *  Base_Info::GetDesc
 *  
 *  Description: function that return Description property
 *  
 *  Return value: description value
 *  
 *  Note:
 ***************************************************/
String Base_Info::GetDesc(){
	return FDescription;
}
//---------------------------------------------------------------------------
/****************************************************
 *  Base_Info::SetTag
 *  
 *  Description: function that set the Tag property
 *  
 *  Tag: new Tag value
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
void Base_Info::SetTag(int Tag){
	FTag = Tag;
}
//---------------------------------------------------------------------------
/****************************************************
 *  Base_Info::GetTag
 *  
 *  Description: function to retrive Tag property
 *  
 *  Return value: Tag property value
 *  
 *  Note:
 ***************************************************/
int Base_Info::GetTag(){
	return FTag;
}
//---------------------------------------------------------------------------
/****************************************************
 *  Base_Info::SetType
 *  
 *  Description: set the value of property Type
 *  
 *  Type: new property value
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
void Base_Info::SetType(int Type){
	FType = Type;
}
//---------------------------------------------------------------------------
/****************************************************
 *  Base_Info::GetType
 *  
 *  Description: return the value of property Type
 *  
 *  Return value: the value of the property
 *  
 *  Note:
 ***************************************************/
int Base_Info::GetType(){
	return FType;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/****************************************************
 *  CommandList::CommandList
 *  
 *  Description: class constructor
 *  
 *  Return value: 
 *
 *  Note:
 ***************************************************/
CommandList::CommandList():Base_Info(){	FPosition = 0;
	CommandQueue = new TList();
	Name = "Generic_queue";
	ID = 0;
	Description = "Empty queue";
	Type = QUERY_GENERIC;
	Position = -1;
	SearchInfo = "";
	//Status = COMMAND_MANAGER_STANDBY;
}
//---------------------------------------------------------------------------
/****************************************************
 *  CommandList::~CommandList
 *  
 *  Description: class destructor
 *  
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
CommandList::~CommandList(){
	Net_Operation *Info;
	for(int a=0; a<CommandQueue->Count; a++){
		Info = (Net_Operation*)CommandQueue->Items[a];
		FreeMemory(Info);
	}
}
//---------------------------------------------------------------------------
/****************************************************
 *  CommandList::AddOperation
 *  
 *  Description: Add an operation to queue
 *  
 *  Op: operation to add
 *  Return value: none
 *  
 *  Note: information of the operation will be added in form of Net_Operation struct
 ***************************************************/
int CommandList::AddOperation(Net_Operation Op){
	int Res;
	Net_Operation *Info = (Net_Operation*)AllocMem(sizeof(Net_Operation));
	Res = CopyNet_Operation(&Op,Info);
	if(Res == 0){
		DEBUG_MGR(TOTAL_DEBUG,"Add operation to URL: "+Op.Url);
		CommandQueue->Add(Info);
	}
	else
		DEBUG_MGR(TOTAL_DEBUG,"Error adding operation: code "+IntToStr(Res));
	return Res;
}//---------------------------------------------------------------------------
int CommandList::ChangeOperation(Net_Operation OldOp, Net_Operation NewOp){
	int Index = GetOperationIndex(OldOp);
	if(Index > -1){
		Net_Operation *Info = (Net_Operation*)CommandQueue->Items[Index];
		Info->Url = NewOp.Url;
		Info->Data = NewOp.Data;
		Info->ExpectedAnswer = NewOp.ExpectedAnswer;
		Info->AnswerManager = NewOp.AnswerManager;
		Info->MethodType = NewOp.MethodType;
		return WEB_SOURCE_CORRECT;
	}
	return WEB_SOURCE_INVALID_OPERATION;
}
//---------------------------------------------------------------------------
int CommandList::RemoveOperation(Net_Operation Op){
	Net_Operation *Info;
	for(int a=0;a<CommandQueue->Count; a++){
		Info = (Net_Operation*)CommandQueue->Items[a];
		if(Info->Url == Op.Url){
			if(Info->Data == Op.Data){
				if(Info->ExpectedAnswer == Op.ExpectedAnswer){
					if(Info->MethodType == Op.MethodType){
						if(Info->AnswerManager == Op.AnswerManager){
							CommandQueue->Delete(a);
							return 0;
						}
					}
				}
			}
		}
	}
	return -1;
}
//---------------------------------------------------------------------------
/****************************************************
 *  CommandList::GetOperation
 *  
 *  Description: return operation information
 *  
 *  Index: index of the operation to read
 *  Return value: a Net_Operation struct for the operation request
 *  
 *  Note:
 ***************************************************/
Net_Operation CommandList::GetOperation(int Index){
	Net_Operation *Info;
	if(Index < CommandQueue->Count){
		if(Index > -1){
			Info = (Net_Operation*)CommandQueue->Items[Index];
			return *Info;
		}
	}
	Info = (Net_Operation*)AllocMem(sizeof(Net_Operation));
	return *Info;
}
//---------------------------------------------------------------------------
/****************************************************
 *  CommandList::GetNumOperations
 *  
 *  Description: return number of operation in queue
 *  
 *  Return value: number of operation loaded
 *  
 *  Note:
 ***************************************************/
int CommandList::GetNumOperations(){
	return CommandQueue->Count;
}
//---------------------------------------------------------------------------
/****************************************************
 *  CommandList::MoveOperation
 *
 *  Description: move an operation inside the queue
 *
 *  ActPos: actual position of the operation
 *  NewPos: new position for the operation
 *  Return value:
 *
 *  Note:
 ***************************************************/
void CommandList::MoveOperation(int ActPos, int NewPos){
	CommandQueue->Move(ActPos, NewPos);
}
//---------------------------------------------------------------------------
/****************************************************
 *  CommandList::Clone
 *  
 *  Description: clone this Command list and all its information
 *  
 *  Return value: a CommandList object copy of itself
 *  
 *  Note:
 ***************************************************/
CommandList *CommandList::Clone(){
	CommandList *Out = new CommandList();
	Net_Operation *Src;
	Out->Name = Name;
	Out->ID = ID;
	Out->Type = Type;
	Out->Description = Description;
	Out->Tag = Tag;
	for(int a=0;a<CommandQueue->Count;a++){
		Src = (Net_Operation*)CommandQueue->Items[a];
		Out->AddOperation(*Src);
	}
	return Out; 
}
//---------------------------------------------------------------------------
/****************************************************
 *  CommandList::GetPosition
 *  
 *  Description: return position in queue of the last executed command
 *  
 *  Return value: position in queue of the last command
 *  
 *  Note:
 ***************************************************/
int CommandList::GetPosition(){
	return FPosition;
}
//---------------------------------------------------------------------------
/****************************************************
 *  CommandList::SetPosition
 *  
 *  Description: set position in queue of the last executed command
 *  
 *  Position: new position in queue
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
void CommandList::SetPosition(int Position){
	FPosition = Position;
}
//---------------------------------------------------------------------------
/****************************************************
 *  CommandList::SetStatus
 *  
 *  Description: set status of command queue
 *  
 *  Stat: new status
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
/*void CommandList::SetStatus(int Stat){
	FStatus = Stat;
}*/
//---------------------------------------------------------------------------
/****************************************************
 *  CommandList::GetStatus
 *  
 *  Description: return status of command queue object
 *  
 *  Return value: the status of the queu
 *  
 *  Note:
 ***************************************************/
/*int CommandList::GetStatus(){
	return FStatus;
}*/
//---------------------------------------------------------------------------
/****************************************************
 *  CommandList::CreateOperation
 *  
 *  Description: create a new operation using parameter
 *  
 *  Url: URL of the operation
 *  Data: additional data for the operation
 *  MethodType: method used (POST, GET,...)
 *  ExpectedAnswer: expected answer from th operation
 *  AddToList: if true, created operation will be add to the queue of operations
 *  Return value: a pointer to a Net_Operation object with the information
 *  
 *  Note:
 ***************************************************/
Net_Operation *CommandList::CreateOperation(String Url, String Data, int MethodType, int ExpectedAnswer, String AnswerManager, bool AddToList){
	Net_Operation *Out = (Net_Operation*)AllocMem(sizeof(Net_Operation));
	Out->Url = Url;
	Out->Data = Data;
	Out->MethodType = MethodType;
	Out->ExpectedAnswer = ExpectedAnswer;
	Out->AnswerManager = AnswerManager;
	if(AddToList)
		AddOperation(*Out);
		//CommandQueue->Add(Out);
	return Out;
}
//---------------------------------------------------------------------------
int CommandList::GetOperationIndex(Net_Operation Op){
	Net_Operation *Tmp;
	for(int a=0;a<CommandQueue->Count;a++){
		Tmp = (Net_Operation*)CommandQueue->Items[a];
		if(Tmp->Url == Op.Url){
			if(Tmp->Data == Op.Data){
				if(Tmp->MethodType == Op.MethodType){
					if(Tmp->ExpectedAnswer == Op.ExpectedAnswer)
						return a;
				}
			}
		}
	}
	return -1;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::TWebSource
 *  
 *  Description: class constructor
 *  
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
TWebSource::TWebSource():Base_Info(){
	InternalSetup();
};
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::TWebSource
 *  
 *  Description: class constructor with an owner
 *  
 *  AOwner: component owner of this class
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
TWebSource::TWebSource(TComponent *AOwner):Base_Info(){
	InternalSetup();
	Owner = AOwner;
	if(Owner->ClassName() == "TNetHTTPClient")
		FClient = (TNetHTTPClient*)Owner;
	else
		FClient = new TNetHTTPClient(Owner);
	if(FClient){
		FClient->ConnectionTimeout = CLIENT_CONNECTION_TIMEOUT;
		FClient->ResponseTimeout = CLIENT_RESPONSE_TIMEOUT;
//		FClient->ContentType = "application/json";
	}
	MultipleRequest = 1;
	DEBUG_SRC(TOTAL_DEBUG,"TWebSource owner class: "+Owner->ClassName());
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::InternalSetup
 *  
 *  Description: setup of internal value of the class
 *  
 *  Return value: 
 *  
 *  Note: INTERNAL USAGE ONLY!!!!
 ***************************************************/
void TWebSource::InternalSetup(){
	Name = "WebSource";
	Tag = 0;
	ID = 0;
	Description = "Web source manager";
	Type = SHOW_SOURCE_INFO;
	
	TaskList = new TList();
	Parameters = new TStringList();
	Information = new TStringList();
	FClient = NULL;
	RequestList = new TList();
	QueueList = new TList();
	AuthRequest = true;
	PreferedLanguage = "English";
	OnInvalidAnswer = NULL;
	OnFindCandidate = NULL;
	DEBUG_SRC(TOTAL_DEBUG,"Created TWebSource");
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::~TWebSource
 *  
 *  Description: class destructor
 *  
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
TWebSource::~TWebSource(){
	
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::AddParameter
 *  
 *  Description: Add a parameter to the source
 *  
 *  Key: key for the parameter
 *  Value: value for the parameter
 *  Return value: result of the function (WEB_SOURCE_CORRECT if all correct)
 *  
 *  Note:
 ***************************************************/
int TWebSource::AddParameter(String Key, String Value, bool AddAsInformation){
	TJSONObject *Tmp;
	DEBUG_SRC(TOTAL_DEBUG,"Adding parameter: Key '"+Key+"' - Value '"+Value+"'");
/*	if(Value.Pos("\"") == 1)
		Value = Value.SubString(2,Value.Length()-1);
	if(Value.Pos("\"") == Value.Length())
		Value = Value.SubString(1,Value.Length()-1); */
	if(AddAsInformation){
		Information->AddPair(Key, Value);
	}
	else{
		Parameters->AddPair(Key, Value);
	}
	return WEB_SOURCE_CORRECT;
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::RemoveParameter
 *  
 *  Description: remove a parameter from the source
 *  
 *  Key: parameter to remove
 *  Return value: result of the function (WEB_SOURCE_CORRECT if all correct) 
 *  
 *  Note:
 ***************************************************/
int TWebSource::RemoveParameter(String Key){
	int a;
	a = Parameters->IndexOfName(Key);
	if(a != -1){
		Parameters->Delete(a);
		return WEB_SOURCE_CORRECT;
	}
	a = Information->IndexOfName(Key);
	if(a != -1){
		Information->Delete(a);
		return WEB_SOURCE_CORRECT;
	}
	return WEB_SOURCE_INVALID_KEY;
/*	TJSONPair *Tmp;
	DEBUG_SRC(TOTAL_DEBUG,"Removing parameter "+Key);
	Tmp = Parameters->RemovePair(Key);
	if(Tmp)
		return WEB_SOURCE_CORRECT;
	DEBUG_SRC(ERR_DEBUG,"Key not exist");
	return WEB_SOURCE_INVALID_KEY;       */
}
//---------------------------------------------------------------------------
int TWebSource::ChangeParameter(String Key, String NewValue){
	int a;
	a = Parameters->IndexOfName(Key);
	if(a != -1){
		Parameters->Values[Key] = NewValue;
		return WEB_SOURCE_CORRECT;
	}
	a = Information->IndexOfName(Key);
	if(a != -1){
		Information->Values[Key] = NewValue;
		return WEB_SOURCE_CORRECT;
	}
	return WEB_SOURCE_INVALID_KEY;
/*	TJSONPair *Tmp;
	Tmp = Parameters->RemovePair(Key);
	if(Tmp){
		return AddParameter(Key,NewValue);
	}
	return WEB_SOURCE_INVALID_KEY; */
}
//---------------------------------------------------------------------------
int TWebSource::RenameParameter(String OldKey, String NewKey){
	int a;
	a = Parameters->IndexOfName(OldKey);
	if(a != -1){
		String Value = Parameters->Values[OldKey];
		Parameters->Delete(a);
		Parameters->AddPair(NewKey, Value);
		return WEB_SOURCE_CORRECT;
	}
	a = Information->IndexOfName(OldKey);
	if(a != -1){
		String Value = Information->Values[OldKey];
		Information->Delete(a);
		Information->AddPair(NewKey, Value);
		return WEB_SOURCE_CORRECT;
	}
	return WEB_SOURCE_INVALID_KEY;
/*	TJSONValue *Val = Parameters->Values[OldKey];
	String Txt;
	if(Val){
		RemoveParameter(OldKey);
		Txt = Val->ToString();
		return AddParameter(NewKey,Txt.SubString(2,Txt.Length()-2));
	}
	return WEB_SOURCE_INVALID_KEY;*/
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::AddCommandsList
 *  
 *  Description: add an existing command list to thi source 
 *  
 *  Cmd: a CommandList to add to this source
 *  Return value: result of the function (WEB_SOURCE_CORRECT if all correct)
 *  
 *  Note:
 ***************************************************/
int TWebSource::AddCommandsList(CommandList *Cmd, bool CloneIt){
	if(Cmd){
		CommandList *Tmp;
		//Check later...
/*		for(int a=0;a<TaskList->Count;a++){
			Tmp = (CommandList*)TaskList->Items[a];
			if(Tmp->Type == Cmd->Type)
				return WEB_SOURCE_COMMAND_TYPE_EXIST;
		}*/
		if(CloneIt)
			Tmp = Cmd->Clone();
		else
			Tmp = Cmd;
		TaskList->Add(Tmp);
		return WEB_SOURCE_CORRECT;
	}
	DEBUG_SRC(ERR_DEBUG,"Invalid TCommandList object");
	return WEB_SOURCE_INVALID_COMMAND_LIST;
}
//---------------------------------------------------------------------------
int TWebSource::RemoveCommandsList(CommandList *Cmd){
	CommandList *Tmp;
	for(int a=0;a<TaskList->Count;a++){
		Tmp = (CommandList*)TaskList->Items[a];
		if(Tmp->Name == Cmd->Name){
			if(Tmp->Description == Cmd->Description){
				if(Tmp->ID == Cmd->ID){
					if(Tmp->Type == Cmd->Type){
						if(Tmp->Tag == Cmd->Tag){
							TaskList->Delete(a);
							return WEB_SOURCE_CORRECT;
						}
					}
				}
			}
		}
	}
	return WEB_SOURCE_INVALID_COMMAND_LIST;
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::CommandListExist
 *  
 *  Description: check if a command list exist in source
 *  
 *  Cmd: command list to check
 *  Return value: WEB_SOURCE_INVALID_COMMAND_LIST if command list is not loaded yet
 *  
 *  Note:
 ***************************************************/
int TWebSource::CommandListExist(CommandList *Cmd){
	if(Cmd){
		CommandList *Tmp;
		for(int a=0;a<TaskList->Count;a++){
			Tmp = (CommandList*)TaskList->Items[a];
			if(Tmp->Type == Cmd->Type)
				return WEB_SOURCE_COMMAND_TYPE_EXIST;
			if(Tmp->Name == Cmd->Name)
				return WEB_SOURCE_COMMAND_NAME_EXIST;
			if(Tmp->ID == Cmd->ID)
				return WEB_SOURCE_COMMAND_ID_EXIST;			
		}
	}
	return WEB_SOURCE_INVALID_COMMAND_LIST;
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::SetClient
 *  
 *  Description: set a new TNetHTTPClient for the class
 *  
 *  Client: the new TNetHTTPClient
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
void TWebSource::SetClient(TNetHTTPClient *Client){
	FClient = Client;
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::GetClient
 *  
 *  Description: return the TNetHTTPClient of the class
 *  
 *  Return value: the TNetHTTPClient of the class
 *  
 *  Note:
 ***************************************************/
TNetHTTPClient *TWebSource::GetClient(){
	return FClient;
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::ExecuteCommand
 *  
 *  Description: execute a command list
 *  
 *  Mgr: command list to be executed
 *  Return value: result of the function (WEB_SOURCE_CORRECT if all correct)
 *  
 *  Note:
 ***************************************************/
int TWebSource::ExecuteCommand(CommandList *Mgr){
	DEBUG_SRC(TOTAL_DEBUG,"Executing TCommandList "+Mgr->Name);
	QueueList->Add(Mgr);
	return UpdateQueueList();
}
//---------------------------------------------------------------------------
int TWebSource::DriveOperation(TNetHTTPRequest *Request, Net_Operation Op){
	int a, b, c;
	String Url,Data,T,X,Y;
	TStringList *Tmp;
	TStringList *Tmp2;
	Url = Op.Url;
	Data = Op.Data;
	Url = System::Strutils::AnsiReplaceStr(Url,START_PARAMETER+(String)LANGUAGE_IDENTIFIER_PARAMETER+END_PARAMETER,GetShortLanguage());
	Tmp = EnumParameters(Url);
	for(a=0;a<Tmp->Count;a++){
		T = Tmp->Strings[a];
		Url = System::Strutils::AnsiReplaceStr(Url,START_PARAMETER+T+END_PARAMETER,ShareParameter(T, false));
	}
	if(Data.Length()>0){
		if(Data.Pos(START_CLIENT_PARAMETER)>0){
			Data = System::Strutils::AnsiReplaceStr(Data,START_PARAMETER+(String)LANGUAGE_IDENTIFIER_PARAMETER+END_PARAMETER,GetShortLanguage());
			Tmp = EnumClientSet(Data);
			for(a=0;a<Tmp->Count;a++){
				T = Tmp->Strings[a];
				Tmp2 = EnumParameters(T);
				for(b=0;b<Tmp2->Count;b++){
					X = Tmp2->Strings[b];
					T = System::Strutils::AnsiReplaceStr(T,START_PARAMETER+X+END_PARAMETER,ShareParameter(X, false));
				}
				b = T.Pos(CLIENT_PARAMETER_SEPARATOR);
				if(b > 0){
					X = T.SubString(0,b - 1);
					Y = T.SubString(b+1,T.Length());
					Request->CustomHeaders[X] = Y;
				}
			}
			a = Data.LastDelimiter(END_CLIENT_PARAMETER);
			Data = Data.SubString(a + 1,Data.Length());
		}
		Tmp = EnumParameters(Data);
		for(a=0;a<Tmp->Count;a++){
			T = Tmp->Strings[a];
			Data = System::Strutils::AnsiReplaceStr(Data,START_PARAMETER+T+END_PARAMETER,ShareParameter(T, false));
		}
	}
	switch(Op.MethodType){
		case METHOD_POST:{
			DEBUG_SRC(TOTAL_DEBUG,"Post command: URL '"+Url+"' - Data:'"+Data+"'");
			TStringStream *Stream = new TStringStream(Data);
			Request->Post(Url, Stream);
		}break;
		case METHOD_GET:{
			DEBUG_SRC(TOTAL_DEBUG,"Get command: URL '"+Url+"'");
			Request->Get(Url);
		}break;
	}	
	return WEB_SOURCE_CORRECT;
}
//---------------------------------------------------------------------------
int TWebSource::TestOperation(Net_Operation Op, TRequestCompletedEvent ReqCompleted, TRequestErrorEvent ReqError){
	TNetHTTPRequest *Request;
	Request = new TNetHTTPRequest(FClient);
	Request->Client = FClient;
	Request->Asynchronous = true;
	Request->OnRequestCompleted = HTTPRequestCompleted;
	Request->OnRequestError = HTTPRequestError;
	WebSource_Data *Tmp = (WebSource_Data*)AllocMem(sizeof(WebSource_Data));
	Tmp->Request = Request;
	Tmp->RequestStatus = HTTP_REQUEST_STANDBY;
	Tmp->WorkingMode = REQUEST_TEST_OPERATION;
	if(ReqCompleted)
		Tmp->ReqCompleted = ReqCompleted;
	if(ReqError)
		Tmp->ReqError = ReqError;
	Tmp->LastOperation = Op;
	Request->Tag = (int)Tmp;
	return DriveOperation(Request, Op);
}
//---------------------------------------------------------------------------
int TWebSource::TestCommand(CommandList *Mgr, TRequestCompletedEvent ReqCompleted, TRequestErrorEvent ReqError){
	TNetHTTPRequest *Request;
	Request = new TNetHTTPRequest(FClient);
	Request->Client = FClient;
	Request->Asynchronous = true;
	Request->OnRequestCompleted = HTTPRequestCompleted;
	Request->OnRequestError = HTTPRequestError;
	WebSource_Data *Tmp = (WebSource_Data*)AllocMem(sizeof(WebSource_Data));
	Tmp->Request = Request;
	Tmp->RequestStatus = HTTP_REQUEST_STANDBY;
	Tmp->WorkingMode = REQUEST_TEST_COMMAND;
	Tmp->Command = Mgr;
	if(ReqCompleted)
		Tmp->ReqCompleted = ReqCompleted;
	if(ReqError)
		Tmp->ReqError = ReqError;
	Tmp->LastOperation = Mgr->GetOperation(0);
	Mgr->Position = 0;
	Request->Tag = (int)Tmp;
	Request->Asynchronous = true;
	return DriveOperation(Request, Mgr->GetOperation(0));
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::DriveCommand
 *  
 *  Description: send a single command to the client as request
 *  
 *  Request: the request that manage the command
 *  Mgr: the CommandList object that contains command list to execute
 *  Index: index of the command to be executed
 *  Return value: result of the function (WEB_SOURCE_CORRECT if all correct)
 *  
 *  Note:
 ***************************************************/
int TWebSource::DriveCommand(TNetHTTPRequest *Request, CommandList *Mgr, int Index){
	if(Mgr == NULL)
		return WEB_SOURCE_INVALID_COMMAND_MANAGER;
	if(Request == NULL)
		return WEB_SOURCE_INVALID_HTTPREQUEST;
	if(Index > Mgr->GetNumOperations())
		return WEB_SOURCE_INVALID_COMMAND_INDEX;
	int a;
	DEBUG_SRC(TOTAL_DEBUG,"DriveCommand: "+Mgr->Name+" - Index: "+IntToStr(Index));
	Net_Operation Op = Mgr->GetOperation(Index);
	Mgr->Position = Index;
	DriveOperation(Request, Op);
	return WEB_SOURCE_CORRECT;
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::EnumParameters
 *  
 *  Description: enum parameters inside a string
 *  
 *  Source: string to be analized
 *  Return value: a TStringList object with founded parameters
 *  
 *  Note:
 ***************************************************/
TStringList *TWebSource::EnumParameters(String Source){
	return GenericEnumData(Source, START_PARAMETER, END_PARAMETER);
}
//---------------------------------------------------------------------------
TStringList *TWebSource::EnumClientSet(String Source){
	return GenericEnumData(Source, START_CLIENT_PARAMETER, END_CLIENT_PARAMETER);
}
//---------------------------------------------------------------------------
TStringList *TWebSource::GenericEnumData(String Source, String StartData, String EndData){
	TStringList *Out = new TStringList();
	String Pattern;
	String Tmp;
	TMatchCollection Items;
	TRegEx *RegEx;
	Pattern = Format("%s(.*?)%s",ARRAYOFCONST((StartData,EndData)));
	RegEx = new TRegEx(Pattern,TRegExOptions());
	Items = RegEx->Matches(Source);
	for(int a=0;a<Items.Count;a++){
		Tmp = Items[a].Value;
		Tmp = System::Strutils::AnsiReplaceStr(Tmp,StartData,"");
		Tmp = System::Strutils::AnsiReplaceStr(Tmp,EndData,"");
		Out->Add(Tmp);
	}
	return Out;
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::ShareParameter
 *  
 *  Description: return parameters/information collected from the source
 *  
 *  Key: parameter/information to be return
 *  Return value: parameter/information value
 *  
 *  Note:
 ***************************************************/
String TWebSource::ShareParameter(String Key, bool InsertWithQuotation){
	//TJSONObject *Obj = (TJSONObject*)Parameters->GetValue(Key);
//	TJSONObject *Obj;
	String Out;
	int a = Parameters->IndexOfName(Key);
	if(a != -1){
		Out = Parameters->Values[Key];
		if(InsertWithQuotation)
			return "\""+Out+(String)"\"";
		else
			return Out;
	}
	a = Information->IndexOfName(Key);
	if(a != -1){
		Out = Information->Values[Key];
		if(InsertWithQuotation)
			return "\""+Out+(String)"\"";
		else
			return Out;
	}
	return "";
}
//---------------------------------------------------------------------------
int TWebSource::DecodeAnswer(String Answer, Net_Operation Operation, CommandList *Cmd){
	int a;
	TStringList *Op = new TStringList();
	TStringList *ParameterToSave = new TStringList();
	TJSONObject *Element;
	TJSONArray *Array;
	TJSONPair *Pair;
	TJSONObject *Obj = (TJSONObject*) TJSONObject::ParseJSONValue(Answer);
	String ArrayID,ShowNameID,TitleID,PosterID;
	String MovieNameID,SummaryID,AerialID;
	String RootPoster = "";
	String Txt;
	Op->Delimiter = ';';
	Txt = Operation.AnswerManager;
	Op->DelimitedText = Operation.AnswerManager;
	for(a=0;a<Op->Count;a++){
		if(Op->Names[a] == "ARRAY_ID"){
			ArrayID = Op->ValueFromIndex[a];
		}		
		if(Op->Names[a] == "SAVE_INFORMATION"){
			ParameterToSave->Add(Op->ValueFromIndex[a]);
		}
		if(Op->Names[a] == "ARRAY_TTILE_ID"){
			TitleID = Op->ValueFromIndex[a];
		}		
		if(Op->Names[a] == "ARRAY_SHOW_ID"){
			ShowNameID = Op->ValueFromIndex[a];
		}		
		if(Op->Names[a] == "ARRAY_MOVIE_ID"){
			MovieNameID = Op->ValueFromIndex[a];
		}
		if(Op->Names[a] == "ARRAY_SUMMARY_ID"){
			SummaryID = Op->ValueFromIndex[a];
		}
		if(Op->Names[a] == "ARRAY_AERIAL_ID"){
			AerialID = Op->ValueFromIndex[a];
		}
		if(Op->Names[a] == "ARRAY_POSTER_ID"){
			PosterID = Op->ValueFromIndex[a];
		}
		if(Op->Names[a] == "ROOT_POSTER"){
			RootPoster = Op->ValueFromIndex[a];
		}

	}
	for(a=0;a<ParameterToSave->Count;a++){
		Txt = Obj->Get(ParameterToSave->Strings[a])->JsonValue->ToString();
		if(Txt.Pos("\"") == 1)
			Txt = Txt.SubString(2,Txt.Length()-1);
		if(Txt.Pos("\"") == Txt.Length())
			Txt = Txt.SubString(1,Txt.Length()-1);
		AddParameter(ParameterToSave->Strings[a],Txt,true);
	}
	if(ArrayID != ""){
		if(Cmd == NULL || Cmd->Type == QUERY_CANDIDATE)
		{
			Candidate_Information *Candidate;
			TList *Info = new TList();
			Array = (TJSONArray*)Obj->Get(ArrayID)->JsonValue;
			for(a=0;a<Array->Size();a++){
				Element = (TJSONObject*)Array->Get(a);
				Candidate = (Candidate_Information*)AllocMem(sizeof(Candidate_Information));
				if(ShowNameID != ""){
					Pair = Element->Get(ShowNameID);
					if(Pair){
						Txt = Pair->JsonValue->Value();
						Candidate->Name = Txt;
					}
				}
				if(TitleID != ""){
					Pair = Element->Get(TitleID);
					if(Pair){
						Txt = Pair->JsonValue->Value();
						Candidate->ID = Txt;
					}
				}
				if(AerialID != ""){
					Pair = Element->Get(AerialID);
					if(Pair){
						Txt = Pair->JsonValue->Value();
						Candidate->Aerial = Txt;
					}
				}
				if(SummaryID != ""){
					Pair = Element->Get(SummaryID);
					if(Pair){
						Txt = Pair->JsonValue->Value();
						Candidate->Summary = Txt;
					}
				}
				if(PosterID != ""){
					Pair = Element->Get(PosterID);
					if(Pair){
						Txt = Pair->JsonValue->Value();
						if(Txt != "null")
							Candidate->Poster = RootPoster + Txt;
						else
							Candidate->Poster = Txt;
					}
				}
				Info->Add(Candidate);
			}
			if(OnFindCandidate)
				OnFindCandidate(Cmd->SearchInfo,Cmd->ID,Info);
		}
	}
	return WEB_SOURCE_CORRECT;
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::HTTPRequestCompleted
 *  
 *  Description: function that manage server answer
 *  
 *  Sender: a TNetHTTPRequest that generate this answer
 *  AResponse: server's answer
 *  Return value: 
 *  
 *  Note:
 ***************************************************/
void __fastcall TWebSource::HTTPRequestCompleted(TObject *Sender, _di_IHTTPResponse  AResponse){
	DEBUG_SRC(TOTAL_DEBUG,"Request answer: "+AResponse->ContentAsString());
	TNetHTTPRequest *Request = (TNetHTTPRequest*)Sender;
	WebSource_Data *Info = (WebSource_Data*)Request->Tag;
	if(Info->LastOperation.ExpectedAnswer){
		if(Info->LastOperation.ExpectedAnswer != AResponse->StatusCode){
			if(OnInvalidAnswer)
				OnInvalidAnswer(Info->LastOperation, Info->Command, Info->LastOperation.ExpectedAnswer, AResponse->StatusCode);
			else{
				String Err = "Error statuscode: expected "+IntToStr(Info->LastOperation.ExpectedAnswer)+(String)" - received "+IntToStr(AResponse->StatusCode);
				Err = Err+(String)"\n"+AResponse->ContentAsString();
				TDialogServiceSync::MessageDialog(Err,TMsgDlgType::mtError,mbYesNo,TMsgDlgBtn(),THelpContext());
			}
			return;
		}
	}
	if(Info){
		switch(Info->WorkingMode){
			case REQUEST_TEST_COMMAND:{
				int Res;
				if(Info->LastOperation.AnswerManager.Length()>0)
					Res = DecodeAnswer(AResponse->ContentAsString(),Info->LastOperation, Info->Command);
				Res = Info->Command->GetNumOperations();
				Res = Info->Command->Position + 1;
				if(Info->Command->GetNumOperations() > Res){
					Info->Command->Position = Info->Command->Position + 1;
					Info->LastOperation = Info->Command->GetOperation(Info->Command->Position);
					DriveOperation(Info->Request, Info->Command->GetOperation(Info->Command->Position));
				}
				if(Info->ReqCompleted)
					Info->ReqCompleted(Sender, AResponse);
			}break;
			case REQUEST_NORMAL_FLOW:{
				if(Info->LastOperation.AnswerManager.Length()>0)
					DecodeAnswer(AResponse->ContentAsString(),Info->LastOperation, Info->Command);
				if(Info->Command->GetNumOperations() > Info->Command->Position + 1){
					Info->Command->Position = Info->Command->Position + 1;
					Info->LastOperation = Info->Command->GetOperation(Info->Command->Position);
					DriveOperation(Info->Request, Info->Command->GetOperation(Info->Command->Position));
				}else{
					Info->RequestStatus = HTTP_REQUEST_STANDBY;
					UpdateQueueList();
					if(Info->ReqCompleted)
						Info->ReqCompleted(Sender, AResponse);
				}
			}break;
			case REQUEST_TEST_OPERATION:{
				int Res = DecodeAnswer(AResponse->ContentAsString(),Info->LastOperation, Info->Command);
				if(Info->ReqCompleted)
					Info->ReqCompleted(Sender, AResponse);
			}break;
		}
	}
}
//---------------------------------------------------------------------------
void __fastcall TWebSource::HTTPRequestError(TObject* Sender, String AError){
	TNetHTTPRequest *Request = (TNetHTTPRequest*)Sender;
	WebSource_Data *Data;
	if(Request){
		Data = (WebSource_Data*)Request->Tag;
		if(Data){
			String ErrCode = AError;
			int Code;
			ErrCode = TRegEx::Replace(ErrCode, "\\D","");
			Code = StrToIntDef(ErrCode, -1);
			if(Code != -1){
				if(OnConnectionError)
					OnConnectionError(FClient,Request,Data->Command,Data->Command->Position,Code,AError);
				else
					TDialogServiceSync::MessageDialog("Error "+ErrCode,TMsgDlgType::mtInformation,mbYesNo,TMsgDlgBtn(),THelpContext());
			}
			Data->RequestStatus = HTTP_REQUEST_STANDBY;
			UpdateQueueList();
		}
	}
	DEBUG_SRC(TOTAL_DEBUG,"Error: "+AError);
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::Clone
 *  
 *  Description: clone this source
 *  
 *  AOwner: optional Owner of the cloned object
 *  Return value: a cloned object
 *  
 *  Note:
 ***************************************************/
TWebSource *TWebSource::Clone(TComponent *AOwner){
	TWebSource *Out;
	int a;
	CommandList *Mgr,*Dest;
	TJSONPair *Pair;
	if(AOwner)
		Out = new TWebSource(AOwner);
	else{
		if(Owner)
			Out = new TWebSource(Owner);
		else
			Out = new TWebSource();
	}
	Out->Name = Name;
	Out->ID = ID;
	Out->Tag = Tag;
	Out->Type = Type;
	Out->Description = Description;
	for(a=0;a<TaskList->Count;a++){
		Mgr = (CommandList*)TaskList->Items[a];
		Dest = Mgr->Clone();
		Out->AddCommandsList(Dest);
	}
	for(a=0;a<Parameters->Count;a++){
		//Out->AddParameter(Parameters->Pairs[a]->JsonString->ToString(),Parameters->Pairs[a]->JsonValue->ToString());
		Out->AddParameter(Parameters->Names[a],Parameters->ValueFromIndex[a]);
	}
	return Out;
}
//---------------------------------------------------------------------------
int TWebSource::UpdateQueueList(){
	if(QueueList->Count > 0){
		CommandList *Cmd;
		TNetHTTPRequest *Request;
		Cmd = (CommandList*)QueueList->Items[0];
		WebSource_Data *Data;
		for(int a=0;a<RequestList->Count;a++){
			Request = (TNetHTTPRequest*)RequestList->Items[a];
			if(Request){
				Data = (WebSource_Data*)Request->Tag;
				if(Data->RequestStatus == HTTP_REQUEST_STANDBY){
					Data->Command = Cmd;
					Data->RequestStatus = HTTP_EXECUTING_COMMAND_MANAGER;
					Data->WorkingMode = REQUEST_NORMAL_FLOW;
					Data->LastOperation = Cmd->GetOperation(0);
					//DriveCommand(Request,Data->Command,0);
					Cmd->Position = 0;
					QueueList->Delete(0);
					return DriveOperation(Request, Cmd->GetOperation(0));
				}
			}
		}

	}
	return WEB_SOURCE_EMPTY_QUEUE;
}
//---------------------------------------------------------------------------
/****************************************************
 *  TWebSource::CreateCommandList
 *  
 *  Description: create a new command list using the parameter
 *  
 *  Name: name for the command list
 *  Desc: description
 *  ID: ID of the new command list
 *  Type: type of command list
 *  Tag: tag for the command list
 *  AddToList: if true, command list will be added to the source
 *  Return value: the command list created
 *  
 *  Note:
 ***************************************************/
CommandList *TWebSource::CreateCommandList(String Name,String Desc,int ID,int Type,int Tag,bool AddToList){
	CommandList *Cmd = new CommandList();
	Cmd->Name = Name;
	Cmd->Description = Desc;
	Cmd->ID = ID;
	Cmd->Type = Type;
	Cmd->Tag = Tag;
	if(AddToList)
		AddCommandsList(Cmd);
	return Cmd;
}
//---------------------------------------------------------------------------
void TWebSource::SetNumRequest(int Num){
	if(RequestList->Count != Num){
		TNetHTTPRequest *Request;
		if(RequestList->Count < Num){
			for(int a=RequestList->Count;a<Num;a++){
				Request = new TNetHTTPRequest(FClient);
				Request->Client = Client;
				Request->OnRequestCompleted = HTTPRequestCompleted;
				Request->OnRequestError = HTTPRequestError;
				//Request->Client = Client;
				WebSource_Data *Tmp = (WebSource_Data*)AllocMem(sizeof(WebSource_Data));
				Tmp->Request = Request;
				Tmp->RequestStatus = HTTP_REQUEST_STANDBY;
				Tmp->WorkingMode = REQUEST_NORMAL_FLOW;
				Request->Tag = (int)Tmp;
				Request->Asynchronous = true;
				RequestList->Add(Request);
			}
		}
		else{
			for(int a=RequestList->Count-1;a<=Num;a--){
				Request = (TNetHTTPRequest*) RequestList->Items[a];
				delete Request;
				RequestList->Delete(a);
			}
		}
	}
}
//---------------------------------------------------------------------------
int TWebSource::GetNumRequest(){
	return RequestList->Count;
}
//---------------------------------------------------------------------------
bool TWebSource::GetReqAuth(){
	return FAuthReq;
}
//---------------------------------------------------------------------------
void TWebSource::SetReqAuth(bool Auth){
	FAuthReq = Auth;
}
//---------------------------------------------------------------------------
bool TWebSource::GetAuth(){
	return FAuth;
}
//---------------------------------------------------------------------------
String TWebSource::GetPrefLang(){
	return FPrefLang;
}
//---------------------------------------------------------------------------
void TWebSource::SetPrefLang(String Lang){
	FPrefLang = Lang;
}
//---------------------------------------------------------------------------
TStringList *TWebSource::GetParameters(){
	TStringList *Out = new TStringList();

	for(int a=0;a<Parameters->Count;a++){
		//Out->AddPair(Parameters->Pairs[a]->JsonString->ToString(),Parameters->Pairs[a]->JsonValue->ToString());
		Out->AddPair(Parameters->Names[a],Parameters->ValueFromIndex[a]);
	}
	return Out;
}
//---------------------------------------------------------------------------
int TWebSource::GetNumCommands(){
	return TaskList->Count;
}
//---------------------------------------------------------------------------
CommandList *TWebSource::GetCommandByIndex(int Index){
	if(Index < TaskList->Count)
		return (CommandList*)TaskList->Items[Index];
	return NULL;
}
//---------------------------------------------------------------------------
String TWebSource::GetShortLanguage(){
	String Short = "en";
	String Lang = FPrefLang.LowerCase();
	for(int a=0;a<ISO_639_LEN;a++){
		if(Lang == Language639[a].EnglishName.LowerCase()){
			Short = Language639[a].Abbreviation;
			a = ISO_639_LEN;
		}
	}
	return Short;
}
//---------------------------------------------------------------------------
int TWebSource::Authenticate(){
	CommandList *Tmp;
	int a;
	for(a=0;a<TaskList->Count;a++){
		Tmp = (CommandList*)TaskList->Items[a];
		if(Tmp->Type == SYS_AUTHENTICATE){
			return ExecuteCommand(Tmp);
		}
	}
	return WEB_SOURCE_COMMAND_NOT_EXIST;
}
//---------------------------------------------------------------------------
int TWebSource::QueryCandidate(String Candidate, TOnFoundCandidate Func, int SearchID){
	CommandList *Tmp;
	int a;
	if(AuthRequest){
		if(Authorized == false)
			Authenticate();
	}
	for(a=0;a<TaskList->Count;a++){
		Tmp = (CommandList*)TaskList->Items[a];
		if(Tmp->Type == QUERY_CANDIDATE){
			if(Func)
				OnFindCandidate = Func;
			CommandList *Out = Tmp->Clone();
			Net_Operation Op1,Op2;
			Out->SearchInfo = Candidate;
            Out->ID = SearchID;
			for(int b=0;b<Out->GetNumOperations();b++){
				Op1 = Out->GetOperation(b);
				if(Op1.Url.Pos(CANDIDATE_STRING_ID) > 0){
					Op2 = Op1;
					Op1.Url = System::Strutils::AnsiReplaceStr(Op1.Url,CANDIDATE_STRING_ID,Candidate);
					Out->ChangeOperation(Op2, Op1);
				}
			}
			return ExecuteCommand(Out);
		}
	}
	return WEB_SOURCE_COMMAND_NOT_EXIST;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
TInfoGrabber::TInfoGrabber(){
	InternalSetup();
}
//---------------------------------------------------------------------------
TInfoGrabber::TInfoGrabber(TComponent *AOwner){
	InternalSetup();
	Owner = AOwner;
	Client = new TNetHTTPClient(Owner);
	Client->SecureProtocols = THTTPSecureProtocols()<<THTTPSecureProtocol::TLS12;
	if(Owner)
		DEBUG_GRB(TOTAL_DEBUG,"Owner class name: "+Owner->ClassName());
}
//---------------------------------------------------------------------------
void TInfoGrabber::InternalSetup(){
	DEBUG_GRB(TOTAL_DEBUG,"Creating TInfoGrabber object");
	InfoSource = new TList();
	PreferedLanguage = "English";
	OnFindCandidate = NULL;
	SearchingData = new TStringList();
}
//---------------------------------------------------------------------------
TInfoGrabber::~TInfoGrabber(){
	
}
//---------------------------------------------------------------------------
TWebSource *TInfoGrabber::CreateInfoSource(String Name,String Desc,int ID,int Type,int Tag, bool AddToList){
	TWebSource *Out;
	Out = new TWebSource(Client);
/*	if(Owner)
		Out = new TWebSource(Owner);
	else
		Out = new TWebSource();  */
	Out->Name = Name;
	Out->Description = Desc;
	Out->Type = Type;
	Out->Tag = Tag;
	Out->ID = ID;
	if(AddToList)
		InfoSource->Add(Out);
	return Out;
}
//---------------------------------------------------------------------------
int TInfoGrabber::AddInfoSource(TWebSource *Source){
	if(Source){
		TWebSource *Src = Source->Clone(Owner);
		InfoSource->Add(Src);
	}
	return WEB_SOURCE_CORRECT;
}
//---------------------------------------------------------------------------
int TInfoGrabber::GetNumInfoSource(){
	return InfoSource->Count;
}
//---------------------------------------------------------------------------
TWebSource *TInfoGrabber::GetSourceByIndex(int Index){
	if(Index < InfoSource->Count){
		return (TWebSource*)InfoSource->Items[Index];
	}
	return NULL;
}
//---------------------------------------------------------------------------
int TInfoGrabber::SaveToXML(String File){
	_di_IXMLNode Node,SubNode,TmpNode,LastNode,XNode;
	TWebSource *Src;
	TStringList *Param;
	CommandList *Cmd;
	Net_Operation Op;
	TXMLDocument *Doc = new TXMLDocument(Owner);
	Doc->DOMVendor = GetDOMVendor("ADOM XML v4");
	Doc->Active = true;
	Doc->Options = TXMLDocOptions()<<doNodeAutoIndent;
	Doc->DocumentElement = Doc->CreateNode("InfoGrabber",ntElement,"");
	Doc->DocumentElement->SetAttribute("Version",INFO_GRABBER_VERSION);
	Doc->DocumentElement->SetAttribute("Class_creator","TInfoGrabber");
	Doc->DocumentElement->SetAttribute("Info","TInfoGrabber class backup");
	for(int a=0;a<InfoSource->Count;a++){
		Src = GetSourceByIndex(a);
		Node = Doc->DocumentElement->AddChild("WebSource",-1);
		Node->SetAttribute("Name",Src->Name);
		Node->SetAttribute("Desc",Src->Description);
		Node->SetAttribute("Type",Src->Type);
		Node->SetAttribute("ID",Src->ID);
		Node->SetAttribute("Tag",Src->Tag);
		Node->SetAttribute("AuthRequest",Src->AuthRequest);
		Node->SetAttribute("Language",Src->PreferedLanguage);
		Param = Src->GetParameters();
		SubNode = Node->AddChild("Parameters",-1);
		for(int b=0;b<Param->Count;b++){
			TmpNode = SubNode->AddChild("Parameter",-1);
			//TmpNode->SetAttribute("Name",Param->Names[b].SubString(2,Param->Names[b].Length()-2));
			//TmpNode->SetAttribute("Value",Param->ValueFromIndex[b].SubString(2,Param->ValueFromIndex[b].Length()-2));
			TmpNode->SetAttribute("Name",Param->Names[b]);
			TmpNode->SetAttribute("Value",Param->ValueFromIndex[b]);
			TmpNode->Text = "Parameter "+IntToStr(b+1);
		}
		SubNode = Node->AddChild("Commands",-1);
		for(int b=0;b<Src->GetNumCommands();b++){
			Cmd = Src->GetCommandByIndex(b);
			TmpNode = SubNode->AddChild("Command",-1);
			TmpNode->SetAttribute("Name",Cmd->Name);
			TmpNode->SetAttribute("Desc",Cmd->Description);
			TmpNode->SetAttribute("Type",Cmd->Type);
			TmpNode->SetAttribute("ID",Cmd->ID);
			TmpNode->SetAttribute("Tag",Cmd->Tag);
			LastNode = TmpNode->AddChild("Operations",-1);
			for(int c=0;c<Cmd->GetNumOperations();c++){
				Op = Cmd->GetOperation(c);
				XNode = LastNode->AddChild("Operation",-1);
				XNode->SetAttribute("Url",Op.Url);
				XNode->SetAttribute("Data",Op.Data);
				XNode->SetAttribute("ExpAnswer",Op.ExpectedAnswer);
				XNode->SetAttribute("Method",Op.MethodType);
				XNode->SetAttribute("AnswerManager",Op.AnswerManager);
				XNode->Text = "Operation "+IntToStr(c);
			}
		}
	}
	Doc->SaveToFile(File);
	return WEB_SOURCE_CORRECT;
}
//---------------------------------------------------------------------------
int TInfoGrabber::LoadFromXML(String File){
	int a, b, c;
	TXMLDocument *Doc = new TXMLDocument(Owner);
	IXMLNode *Node,*SubNode,*XNode, *LastNode, *BNode;
	String Txt;
//	DEBUG_GRB(TOTAL_DEBUG,"LoadFromXML -> "+File);
	String Name,Desc,Lang,Manager;
	int Type,Tag,ID;
	OleVariant Ole;
	bool Auth;
	if(FileExists(File) == false)
        return WEB_SOURCE_INVALID_FILE;
	Doc->LoadFromFile(File);
	Doc->DOMVendor = GetDOMVendor("ADOM XML v4");
	Doc->Active=true;
	if(Doc->DocumentElement->NodeName == "InfoGrabber"){
		Txt = Doc->DocumentElement->GetAttribute("Class_creator");
		if(Txt == "TInfoGrabber"){
			a = Doc->DocumentElement->GetAttribute("Version");
			if(a <= INFO_GRABBER_VERSION){
				Reset();
				TWebSource *Source;
				CommandList *Cmd;
				Net_Operation Op;
				for(a=0;a<Doc->DocumentElement->ChildNodes->Count;a++){
					Node = Doc->DocumentElement->ChildNodes->Get(a);
					Name = Node->GetAttribute("Name");
					Desc = Node->GetAttribute("Desc");
					Lang = Node->GetAttribute("Language");
					Type = Node->GetAttribute("Type");
					Tag = Node->GetAttribute("Tag");
					ID = Node->GetAttribute("ID");
					Source = CreateInfoSource(Name,Desc,ID,Type,Tag);
					Source->PreferedLanguage = Lang;
					Name = Node->GetAttribute("AuthRequest");
					if(Name == "true")
						Source->AuthRequest = true;
					else
						Source->AuthRequest = false;
					if(Node->ChildNodes->Count > 0){
						//Parameters...
						SubNode = Node->ChildNodes->Get(0);
						for(b=0;b<SubNode->ChildNodes->Count;b++){
							XNode = SubNode->ChildNodes->Get(b);
							Name = XNode->GetAttribute("Name");
							Desc = XNode->GetAttribute("Value");
							Source->AddParameter(Name,Desc);
						}
					}
					if(Node->ChildNodes->Count > 1){
						//Commands...
						SubNode = Node->ChildNodes->Get(1);
						for(b=0;b<SubNode->ChildNodes->Count;b++){
							XNode = SubNode->ChildNodes->Get(b);
							Name = XNode->GetAttribute("Name");
							Desc = XNode->GetAttribute("Desc");
							Type = XNode->GetAttribute("Type");
							Tag = XNode->GetAttribute("Tag");
							ID = XNode->GetAttribute("ID");
							Cmd = Source->CreateCommandList(Name,Desc,ID,Type,Tag);
							if(XNode->ChildNodes->Count>0){
								//Operation...
								LastNode = XNode->ChildNodes->Get(0);
								for(c=0;c<LastNode->ChildNodes->Count;c++){
									BNode = LastNode->ChildNodes->Get(c);
									Name = BNode->GetAttribute("Url");
									Desc = BNode->GetAttribute("Data");
									Tag = BNode->GetAttribute("ExpAnswer");
									ID = BNode->GetAttribute("Method");
									Manager = BNode->GetAttribute("AnswerManager");
									Op.Url = Name,Op.Data = Desc, Op.ExpectedAnswer = Tag, Op.MethodType = ID,Op.AnswerManager = Manager;
									Cmd->AddOperation(Op);
								}
							}
						}
					}
				}
			}
		}
	}
	return WEB_SOURCE_CORRECT;
}
//---------------------------------------------------------------------------
int TInfoGrabber::Reset(){
	int a;
	for(a=InfoSource->Count-1;a>-1;a--){
		InfoSource->Delete(a);
	}
	return WEB_SOURCE_CORRECT;
}
//---------------------------------------------------------------------------
int TInfoGrabber::GetNumSourceByType(int Type){
	int Out = 0;
	TWebSource *Src;
	for(int a=0;a<InfoSource->Count;a++){
		Src = (TWebSource*)InfoSource->Items[a];
		if(Src->Type == Type)
			Out++;
	}
	return Out;
}
//---------------------------------------------------------------------------
bool TInfoGrabber::CompareSource(TWebSource *Src1, TWebSource *Src2){
	if(Src1->Name != Src2->Name)
		return false;
	if(Src1->Type != Src2->Type)
		return false;
	if(Src1->Description != Src2->Description)
		return false;
	if(Src1->ID != Src2->ID)
		return false;
	if(Src1->Tag != Src2->Tag)
		return false;
	if(Src1->GetNumCommands()!=Src2->GetNumCommands())
		return false;
	for(int a=0;a<Src1->GetNumCommands();a++){
		if(Src1->GetCommandByIndex(a)->GetNumOperations() !=
			Src2->GetCommandByIndex(a)->GetNumOperations())
			return false;
	}
	return true;
}
//---------------------------------------------------------------------------
int TInfoGrabber::GetSorceOrderInSearchIndex(TWebSource *Src){
	bool found = false;
	int Out = 0;
	TWebSource *Tmp;
	for(int a=0;a<InfoSource->Count;a++){
		Tmp = (TWebSource*)InfoSource->Items[a];
		if(CompareSource(Tmp, Src)){
			found = true;
			break;
		}
		if(Src->Type == Tmp->Type)
			Out++;
	}
	if(found)
		return Out;
	return -1;
}
//---------------------------------------------------------------------------
int TInfoGrabber::ChangeSourceSearchOurder(TWebSource *Src, int NewPlace){
	int Index = -1;
	int a;
	int Count;
	if(GetSorceOrderInSearchIndex(Src) == NewPlace)
		return WEB_SOURCE_CORRECT;
	TWebSource *Tmp;
	for(a=0;a<InfoSource->Count;a++){
		Tmp = (TWebSource*)InfoSource->Items[a];
		if(CompareSource(Tmp, Src)){
			Index = a;
			break;
		}
	}
	if(Index == -1)
		return WEB_SOURCE_INVALID_SOURCE;
	if(NewPlace <= 0){
		InfoSource->Move(Index, 0);
	}
	else{
		if(NewPlace >= GetNumSourceByType(Src->Type)){
			InfoSource->Move(Index, InfoSource->Count-1);
		}
		else{
			Count = 0;
			for(a=0;a<InfoSource->Count;a++){
				Tmp = (TWebSource*)InfoSource->Items[a];
				if(Count == NewPlace){
					InfoSource->Move(Index, a);
					break;
				}
				if(Tmp->Type == Src->Type){
					Count++;
				}
			}
		}
	}
	return WEB_SOURCE_CORRECT;
}
//---------------------------------------------------------------------------
String TInfoGrabber::GetPrefLang(){
	return FPrefLang;
}
//---------------------------------------------------------------------------
void TInfoGrabber::SetPrefLang(String Lang){
	FPrefLang = Lang;
}
//---------------------------------------------------------------------------
int TInfoGrabber::RemoveInfoSource(TWebSource *Source){
	int a;
	TWebSource *Tmp;
	for(a=0;a<InfoSource->Count;a++){
		Tmp = (TWebSource*)InfoSource->Items[a];
		if(CompareSource(Tmp, Source)){
			InfoSource->Delete(a);
			return WEB_SOURCE_CORRECT;
		}
	}
	return WEB_SOURCE_INVALID_SOURCE;
}
//---------------------------------------------------------------------------
int TInfoGrabber::QueryShowCandidate(String Candidate, int SearchID){
	if(SearchingData->IndexOf(Candidate) != -1){
		return WEB_SOURCE_SEARCH_IN_PROGRESS;
	}
	int a;
	TWebSource *Tmp;
	int *X;
	for(a=0;a<InfoSource->Count;a++){
		Tmp = (TWebSource*)InfoSource->Items[a];
		if(Tmp->Type == SHOW_SOURCE_INFO){
			X = (int*)AllocMem(sizeof(int));
			*X = a;
			SearchingData->AddObject(Candidate, (TObject*)X);
			Tmp->QueryCandidate(Candidate,InternalFoundShowCandidate);
			return WEB_SOURCE_CORRECT;
		}
	}
	return WEB_SOURCE_INVALID_SOURCE;
}
//---------------------------------------------------------------------------
void __fastcall TInfoGrabber::InternalFoundShowCandidate(String Candidate, int SearchID,TList *Result){
//    unicodestring
	int a;
	a = SearchingData->IndexOf(Candidate);
	if(Result->Count){
		if(OnFindCandidate)
			OnFindCandidate(Candidate, SearchID,Result);
		if(a != -1)
			SearchingData->Delete(a);
	}
	else{
		TWebSource *Tmp;
		int *X;
		if(a != -1){
			X = (int*)SearchingData->Objects[a];
			for(a = *X+1;a<InfoSource->Count;a++){
				Tmp = (TWebSource*)InfoSource->Items[a];
				if(Tmp->Type == SHOW_SOURCE_INFO){
					*X = a;
					Tmp->QueryCandidate(Candidate,InternalFoundShowCandidate, SearchID);
				}
			}
		}
	}
}
//---------------------------------------------------------------------------
#pragma package(smart_init)


